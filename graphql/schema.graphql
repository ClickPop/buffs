"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    users: [User!]! @all
    user(id: ID @eq): User @find

    streams: [Stream!]! @all
    stream(id: ID @eq): Stream @find

    leaderboards: [Leaderboard!]! @all
    leaderboard(id: ID @eq): Leaderboard @find

    platforms: [Platform!]! @all
    platform(id: ID @eq, name: String @eq): Platform @find
}

type Mutation {
    userCreate(input: UserInput @spread): User @create
    userUpdate(id: ID!, input: UserInput @spread): User @update
    userDelete(input: ID!): User @delete

    roleCreate(input: RoleInput @spread): Role @create
    roleUpdate(id: ID!, input: RoleInput @spread): Role @update
    roleDelete(input: ID!): Role @delete

    platformCreate(input: PlatformInput @spread): Platform @create
    platformUpdate(id: ID!, input: PlatformInput @spread): Platform @update
    platformDelete(input: ID!): Platform @delete
    
    streamCreate(input: StreamInput @spread): Stream @create
    streamUpdate(id: ID!, input: StreamInput @spread): Stream @update
    streamDelete(input: ID!): Stream @delete

    leaderboardCreate(input: LeaderboardInput @spread): Leaderboard @create
    leaderboardUpdate(id: ID!, input: LeaderboardInput @spread): Leaderboard @update
    leaderboardDelete(input: ID!): Leaderboard @delete
    
    leaderboardReferralCreate(input: LeaderboardReferralInput @spread): LeaderboardReferral @create
    leaderboardReferralUpdate(id: ID!, input: LeaderboardReferralInput @spread): LeaderboardReferral @update
    leaderboardReferralDelete(input: ID!): LeaderboardReferral @delete
}

input LeaderboardReferralInput {
    leaderboard: LeaderboardRelation
    referrer: String
    user_agent: String
    ip_address: String
}

input UserInput {
    username: String
    name: String
    email: String
    password: String
    streams: StreamRelation
    leaderboard: LeaderboardRelation
    roles: RoleRelation
}

input RoleInput {
    name: String
    description: String
    users: UserRelation
}

input PlatformInput {
    name: String
    socialite_drive: String
    description: String
    url: String
    channel_url_structure: String
    leaderboards: Leaderboard
    streams: Stream
}

input StreamInput {
    channel_name: String
    platform: PlatformRelation
    user: UserRelation
}

input LeaderboardInput {
    name: String
    stream: StreamRelation
}

input LeaderboardRelation {
    connect: ID!
    create: LeaderboardInput
    update: LeaderboardInput
}

input UserRelation {
    connect: ID!
    create: UserInput
    update: UserInput
}

input StreamRelation {
    connect: ID!
    create: StreamInput
    update: StreamInput
}

input RoleRelation {
    connect: [ID!]
    create: RoleInput
    update: RoleInput
}

input PlatformRelation {
    connect: ID!
    create: PlatformInput
    update: PlatformInput
}

input PlatformFilters {
    id: ID @eq
    name: String @eq
}

type User {
    id: ID!
    username: String!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!

    streams: [Stream!]! @hasMany
    leaderboards: [Leaderboard!]! @hasMany
    roles: [Role!]! @belongsToMany
}

type Role {
    id: ID!
    name: String!
    description: String!
    users: [User!]! @belongsToMany
}

type Platform {
    id: ID!
    name: String!
    socialite_drive: String!
    description: String!
    url: String!
    channel_url_structure: String!
    leaderboards: [Leaderboard!]! @hasMany
    streams: [Stream!]! @hasMany
}

type Stream {
    id: ID!
    channel_name: String!
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!
    platform: Platform! @belongsTo
    user: User! @belongsTo
}

type Leaderboard {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!
    stream: Stream! @belongsTo
    referrals: [LeaderboardReferral!] @hasMany
}

type LeaderboardReferral {
    id: ID!
    leaderboard: Leaderboard! @belongsTo
    referrer: String!
    user_agent: String!
    ip_address: String!
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!
}

